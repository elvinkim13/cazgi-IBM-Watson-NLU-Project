{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","emotions","Object","entries","this","props","map","key","value","className","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","setState","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","response","data","output","style","color","fontSize","sendForEmotionAnalysis","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uRAoBeA,E,4JAhBX,WACE,IAAIC,EAAWC,OAAOC,QAAQC,KAAKC,MAAMJ,UAAUK,KAAI,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACvE,OAAO,+BAAI,6BAAKD,IAAS,6BAAKC,UAEhC,OACE,8BACE,uBAAOC,UAAU,uBAAjB,SACE,gCACCR,Y,GATcS,IAAMC,W,gBCmGlBC,E,4MA/FXC,MAAQ,CACJC,UAAW,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cAC3CC,KAAM,OACNC,gBAAiB,GACjBC,WAAW,G,EAGfC,eAAiB,WACbC,SAASC,eAAe,aAAaf,MAAQ,GACrB,QAApB,EAAKK,MAAMK,MACX,EAAKM,SAAS,CACVV,UAAW,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cAC3CC,KAAM,OACNC,gBAAiB,GACjBC,WAAW,K,EAKvBK,cAAgB,WACZH,SAASC,eAAe,aAAaf,MAAQ,GACrB,SAApB,EAAKK,MAAMK,MACX,EAAKM,SAAS,CACVV,UAAW,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cAC3CC,KAAM,MACNC,gBAAiB,GACjBC,WAAW,K,EAKvBM,yBAA2B,WACvB,EAAKF,SAAS,CAAEJ,WAAW,IAC3B,IACIO,EAAM,2DAGNA,EADoB,QAApB,EAAKd,MAAMK,KACLS,EAAM,sBAAwBL,SAASC,eAAe,aAAaf,MAEnEmB,EAAM,wBAA0BL,SAASC,eAAe,aAAaf,MAEzEoB,IAAMC,IAAIF,GACZG,MAAK,SAACC,GAGN,EAAKP,SAAS,CAAEL,gBAAiBY,EAASC,OAE1C,IAAIC,EAASF,EAASC,KAElBC,EADkB,aAAlBF,EAASC,KACA,qBAAKE,MAAO,CAAEC,MAAO,QAASC,SAAU,IAAxC,SAA+CH,IAC/B,aAAlBF,EAASC,KACP,qBAAKE,MAAO,CAAEC,MAAO,MAAOC,SAAU,IAAtC,SAA6CH,IAE7C,qBAAKC,MAAO,CAAEC,MAAO,SAAUC,SAAU,IAAzC,SAAgDH,IAE7D,EAAKT,SAAS,CAAEL,gBAAiBc,Q,EAIzCI,uBAAyB,WACrB,EAAKb,SAAS,CAAEJ,WAAW,IAC3B,IACIO,EAAM,+DAENA,EADoB,QAApB,EAAKd,MAAMK,KACLS,EAAM,oBAAsBL,SAASC,eAAe,aAAaf,MAEjEmB,EAAM,uBAAyBL,SAASC,eAAe,aAAaf,MAExEoB,IAAMC,IAAIF,GAEZG,MAAK,SAACC,GAER,EAAKP,SAAS,CAAEL,gBAAiB,cAAC,EAAD,CAAclB,SAAU8B,EAASC,a,4CAMxE,WACI,OACI,sBAAKvB,UAAU,MAAf,UACI,wBAAQA,UAAU,eAAe6B,QAASlC,KAAKiB,eAA/C,kBACA,wBAAQZ,UAAU,eAAe6B,QAASlC,KAAKqB,cAA/C,iBACA,uBAAM,uBACLrB,KAAKS,MAAMC,UACZ,uBACA,wBAAQL,UAAU,cAAc6B,QAASlC,KAAKsB,yBAA9C,+BACA,wBAAQjB,UAAU,cAAc6B,QAASlC,KAAKiC,uBAA9C,6BACA,uBACCjC,KAAKS,MAAMM,uB,GA1FVT,IAAMC,WCMT4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAASC,eAAe,SAM1BgB,K","file":"static/js/main.925938ee.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    render() {\n      let emotions = Object.entries(this.props.emotions).map(([key, value]) => {\n        return <tr><td>{key}</td><td>{value}</td></tr>\n      })\n      return (  \n        <div>\n          <table className=\"table table-bordered\">\n            <tbody>\n            {emotions}\n            </tbody>\n          </table>\n          </div>\n          );\n        }\n    \n}\nexport default EmotionTable;","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component {\n    state = {\n        innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n        mode: \"text\",\n        sentimentOutput: [],\n        sentiment: true\n    }\n\n    renderTextArea = () => {\n        document.getElementById(\"textinput\").value = \"\";\n        if (this.state.mode === \"url\") {\n            this.setState({\n                innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n                mode: \"text\",\n                sentimentOutput: [],\n                sentiment: true\n            })\n        }\n    }\n\n    renderTextBox = () => {\n        document.getElementById(\"textinput\").value = \"\";\n        if (this.state.mode === \"text\") {\n            this.setState({\n                innercomp: <textarea rows=\"1\" cols=\"50\" id=\"textinput\" />,\n                mode: \"url\",\n                sentimentOutput: [],\n                sentiment: true\n            })\n        }\n    }\n\n    sendForSentimentAnalysis = () => {\n        this.setState({ sentiment: true });\n        let ret = \"\";\n        let url = \"elvin-sentime.nt-analyzer-chipper-tiger-kc.mybluemix.net\";\n\n        if (this.state.mode === \"url\") {\n            url = url + \"/url/sentiment?url=\" + document.getElementById(\"textinput\").value;\n        } else {\n            url = url + \"/text/sentiment?text=\" + document.getElementById(\"textinput\").value;\n        }\n        ret = axios.get(url);\n        ret.then((response) => {\n            //Include code here to check the sentiment and fomrat the data accordingly\n          \n            this.setState({ sentimentOutput: response.data});\n\n            let output = response.data;\n            if (response.data === \"positive\") {\n                output = <div style={{ color: \"green\", fontSize: 20 }}>{output}</div>\n            } else if (response.data === \"negative\") {\n                output = <div style={{ color: \"red\", fontSize: 20 }}>{output}</div>\n            } else {\n                output = <div style={{ color: \"orange\", fontSize: 20 }}>{output}</div>\n            }\n            this.setState({ sentimentOutput: output });\n        });\n    }\n\n    sendForEmotionAnalysis = () => {\n        this.setState({ sentiment: false });\n        let ret = \"\";\n        let url = \"http:elvin-sentiment-analyzer-chipper-tiger-kc.mybluemix.net\";\n        if (this.state.mode === \"url\") {\n            url = url + \"/url/emotion?url=\" + document.getElementById(\"textinput\").value;\n        } else {\n            url = url + \"/text/emotion/?text=\" + document.getElementById(\"textinput\").value;\n        }\n        ret = axios.get(url);\n\n        ret.then((response) => {\n\n          this.setState({ sentimentOutput: <EmotionTable emotions={response.data} /> });\n        }); \n          \n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n                <button className=\"btn btn-dark\" onClick={this.renderTextBox}>URL</button>\n                <br /><br />\n                {this.state.innercomp}\n                <br />\n                <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n                <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n                <br />\n                {this.state.sentimentOutput}\n            </div>\n        );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}